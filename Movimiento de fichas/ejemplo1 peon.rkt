#lang racket
(require (lib "graphics.ss" "graphics"))
(open-graphics)
;Jhon ALex Gaviria Tobón
;08/07/2019
;vector modo texto
;EN ESTE CASO
;                   1    2    3    4    5    6    7    8
(define piezas (vector (vector  0  0  0  0  0  0  0  8);1
                       (vector  0  0  0  0  0  0  0  16);2
                       (vector  0  0  0  0  0  0  0  0);3
                       (vector  0  0  0  0  0  0  0  0);4
                       (vector  0  0  0  0  0  0  0  0);5
                       (vector  0  0  0  0  0  0  0  0);6
                       (vector  17 0  0  0  0  0  0  0);7
                       (vector  0  0  0  0  0  0  0  0);8
                       )
  )
;posicion inicial (efimero)
(define filai 0)
(define columnai 0)
(define columnaf 0)
(define filaf 0)
(define click 0)
(define click2 0)
(define nu 0)
(define esta-en-jaqueB 0)
(define esta-en-jaqueN 0)
(define ficha2 0)
(define torre-reyN 0)
(define torre-reyB 0)
(define mate-blancas 0)
(define mate-negras 0)
(define ventana1 (open-viewport "Ajedrez"  500 600))
;poner cada cuadro
(define (dibujar a b e)
  (if (> e 8)
      ((draw-rectangle ventana1) (make-posn 49 49) 401 401 "black")
      (if (> a 400)
          (dibujar 50 (+ b 50) (+ e 1))
          (begin
            (if(odd? e)
               (if(odd?(/ a 50))
                  (dibujar(+ a 50)b e)
                  (begin
                    ((draw-solid-rectangle ventana1)(make-posn a b)50 50 "Slate Blue")
                    (dibujar(+ a 50)b e))     
                  )
               (if(odd?(/ a 50))
                  (begin
                    ((draw-solid-rectangle ventana1)(make-posn a b)50 50 "Slate Blue")
                    (dibujar(+ a 50)b e))
                  (dibujar(+ a 50)b e))        
               )
            )
          )
      )
  ) 
(dibujar 50 50 1)
;poner cada imagen
(((draw-pixmap-posn "images/peon.gif" 'gif/mask) ventana1)(make-posn 50 350 ))
(((draw-pixmap-posn "images/Peon2.gif" 'gif/mask) ventana1)(make-posn 400 100 ))
;posiciones de mouse
(define (inicio)
  (set! click  (get-mouse-click ventana1))
  (set! filai (-(truncate(/ (posn-y (mouse-click-posn click)) 50))1))
  (set! columnai (-(truncate(/ (posn-x (mouse-click-posn click)) 50))1))
  (if (and (> filai -1)(< filai 8)(> columnai -1)(< columnai 8)) 
           (vector-ref (vector-ref piezas filai) columnai)
           (inicio)
           )
  )
(define (final)
  (set! click2 (get-mouse-click ventana1))
  (set! filaf (- (truncate(/ (posn-y (mouse-click-posn click2)) 50))1))
  (set! columnaf (- (truncate(/ (posn-x (mouse-click-posn click2)) 50))1))
  )
;llamando (inicio)
(define (llamar ficha)
  (if (odd? nu)
      ;movimiento de Nagras
      (if (and (>= ficha 1)(<= ficha 16))
          (begin
            (final)
            (verificar filaf columnaf ficha nu)
            (set! esta-en-jaqueB 0)
            (ataquesN 1)
            (if (= esta-en-jaqueB 1)
                (((draw-pixmap-posn "images/jaqueB.jpg") ventana1)(make-posn 50 475))
                (void))
            (llamar (inicio))
            )             
          (begin
            (llamar (inicio))
            )
          )
      ;movimiento de Blancas
      (if (and (>= ficha 17)(<= ficha 32))
              (begin
                (final)
                (verificar filaf columnaf ficha nu)
                (set! esta-en-jaqueN 0)
                (ataquesB 17)
                (if (= esta-en-jaqueN 1)
                    (((draw-pixmap-posn "images/jaqueN.jpg") ventana1)(make-posn 50 475))
                    (void))
                (llamar (inicio))  
                )
              (begin
                (llamar (inicio))
                )
              )
          )
      )
;vereficar ficha
(define (verificar nu num ficha nuf)
  (if (odd? nuf)
      (if (Blanca? nu num)
          (cond
            ((and (>= ficha 9) (<= ficha 16)) (peonN nu num ficha));peones
            ((or (= ficha 1)(= ficha 8)) (torre nu num ficha));torres
            ((or (= ficha 3)(= ficha 6)) (alfil nu num ficha));alfil
            ((or (= ficha 2)(= ficha 7)) (caballo nu num ficha));caballos
            ((= ficha 4) (dama nu num ficha));damas
            ((= ficha 5) (rey nu num ficha));reyes
            (else  (display "ficha inexistente en el juego"))
            )
          (display "No te puedes comer a tu equipo")
          )
      (if (Negra? nu num)
          (cond
            ((and (>= ficha 17) (<= ficha 24)) (peonB nu num ficha));peones
            ((or (= ficha 25)(= ficha 32)) (torre nu num ficha));torres
            ((or (= ficha 27)(= ficha 30)) (alfil nu num ficha));alfil
            ((or (= ficha 26)(= ficha 31)) (caballo nu num ficha));caballos
            ((= ficha 28) (dama nu num ficha));damas
            ((= ficha 29) (rey nu num ficha));reyes
            (else  (display "ficha inexistente en el juego"))
            )
          (display "No te puedes comer a tu equipo")
          )
      )
  )
;¿es negra?
(define (Negra? ff cf)
  (if (or (and (>= (vector-ref (vector-ref piezas ff) cf) 1)
               (<= (vector-ref (vector-ref piezas ff) cf) 16))
          (= (vector-ref (vector-ref piezas ff) cf) 0))
      #t
      #f
      )
    )
;¿es blanca?
(define (Blanca? ff cf)
  (if (or (and (>= (vector-ref (vector-ref piezas ff) cf) 17)
               (<= (vector-ref (vector-ref piezas ff) cf) 32))
          (= (vector-ref (vector-ref piezas ff) cf) 0))
      #t
      #f
      )
    )
;movimiento peon NEGRO
(define (peonN ff cf ficha)
  (if (> ff -1)
      ;comer
      (if (or (and (= cf (- columnai 1)) (= ff (+ filai 1)))
              (and (= cf (+ columnai 1)) (= ff (+ filai 1)))
              )
          (if (equal? (vector-ref (vector-ref piezas ff) cf) 0)
              (displayln "Movimiento invalido")
              (if (or (>= ficha 1) (<= ficha 16))
                  (begin
                    (jugar ff cf ficha)
                    (if (= ff 7)
                        (begin
                          (set! nu (- nu 1))
                          (coronacionB ff cf)
                          )
                        (void)
                    )
                    )
                  (displayln "Movimiento invalido")
                  )
              )
          ;mover
          (if (= filai 1)
              (if (or (and (= columnai cf) (= ff (+ filai 1))
                           (equal? (vector-ref (vector-ref piezas (+ filai 1)) columnai) 0))
                      (and (= columnai cf) (= ff (+ filai 2))
                           (equal? (vector-ref (vector-ref piezas (+ filai 1)) columnai) 0)
                           (equal? (vector-ref (vector-ref piezas (+ filai 2)) columnai) 0)))
                  (begin
                    (jugar ff cf ficha)
                    (if (= ff 7)
                        (begin
                          (set! nu (- nu 1))
                          (coronacionB ff cf)
                          )
                        (void)
                    )
                    )
                  (displayln "Movimiento invalido")
                  )
              (if (and (= columnai cf) (= ff (+ filai 1))
                       (equal? (vector-ref (vector-ref piezas (+ filai 1)) columnai) 0))
                  (begin
                    (jugar ff cf ficha)
                    (if (= ff 7)
                        (begin
                          (set! nu (- nu 1))
                          (coronacionB ff cf)
                          )
                        (void)
                    )
                    )
                  (displayln "Movimiento invalido")
                  )
              )
          )
          
      (displayln "Movimiento invalido")
      )
  )
;movimiento peon BLANCO
(define (peonB ff cf ficha)
  (if (> ff -1)
      ;comer
      (if (or (and (= cf (- columnai 1)) (= ff (- filai 1)))
              (and (= cf (+ columnai 1)) (= ff (- filai 1)))
              )
          (if (equal? (vector-ref (vector-ref piezas ff) cf) 0)
              (displayln "Movimiento invalido")
              (if (or (>= ficha 1) (<= ficha 16))
                  (begin
                    (jugar ff cf ficha)
                    (if (= ff 0)
                        (begin
                          (set! nu (- nu 1))
                          (coronacionB ff cf)
                          )
                        (void)
                        )
                    )
                  (displayln "Movimiento invalido")
                  )
              )
          (if (= filai 6)
              ;mover 
              (if (or (and (= columnai cf) (= ff (- filai 1))
                           (equal? (vector-ref (vector-ref piezas (- filai 1)) columnai) 0))
                      (and (= columnai cf) (= ff (- filai 2))
                           (equal? (vector-ref (vector-ref piezas (- filai 1)) columnai) 0)
                           (equal? (vector-ref (vector-ref piezas (- filai 2)) columnai) 0)))
                  (begin
                    (jugar ff cf ficha)
                    (if (= ff 0)
                        (begin
                          (set! nu (- nu 1))
                          (coronacionB ff cf)
                          )
                        (void)
                    )
                    )
                  (displayln "Movimiento invalido")
                  )
              (if (and (= columnai cf) (= ff (- filai 1))
                       (equal? (vector-ref (vector-ref piezas (- filai 1)) columnai) 0))
                  (begin
                    (jugar ff cf ficha)
                    (if (= ff 0)
                        (begin
                          (set! nu (- nu 1))
                          (coronacionB ff cf)
                          )
                        (void)
                    )
                    )
                  (displayln "Movimiento invalido")
                  )
              )
          )
      (displayln "Movimiento invalido")
      )
  )
;alfil
(define (alfil ff cf ficha)
      (if (and (> ff -1)(< ff 8)
               (> cf -1)(< cf 8))
          (if (and (= (abs (- filai ff))(abs (- columnai cf)))
                   (prohibido 0 0 ff cf filai columnai))
              (begin
                (jugar ff cf ficha)
                )
              (displayln "Movimiento invalido")
              )
          (displayln "Movimiento invalido")
          )
      )
;caballo
(define (caballo ff cf ficha)
  (if (and (> ff -1)(< ff 8)
           (> cf -1)(< cf 8))
      (if(or (and (= ff (+ filai 2))(= cf (- columnai 1)))
             (and (= ff (+ filai 2))(= cf (+ columnai 1)))
             (and (= ff (- filai 2))(= cf (- columnai 1)))
             (and (= ff (- filai 2))(= cf (+ columnai 1)))
             (and (= ff (+ filai 1))(= cf (- columnai 2)))
             (and (= ff (- filai 1))(= cf (- columnai 2)))
             (and (= ff (+ filai 1))(= cf (+ columnai 2)))
             (and (= ff (- filai 1))(= cf (+ columnai 2))))
         (begin
           (jugar ff cf ficha)
           )
         (displayln "Movimiento invalido")
         )
      (displayln "Movimiento invalido")
      )
  )
;torre
(define (torre ff cf ficha)
  (if (and (> ff -1)(< ff 8)
           (> cf -1)(< cf 8))
      (if (and (or (= filai ff) (= columnai cf))
               (prohibido 0 0 ff cf filai columnai))
              (begin
                (jugar ff cf ficha)
                (if (odd? nu)
                     (set! torre-reyN 1)
                     (set! torre-reyB 1)
                     )
                )
              (displayln "Movimiento invalido")
              )
      (displayln "Movimiento invalido")
      )
  )
;Dama
(define (dama ff cf ficha)
  (if (and (> ff -1)(< ff 8)
           (> cf -1)(< cf 8))
           (if (and (or (= (abs (- filai ff))(abs (- columnai cf)))
                        (= filai ff)(= columnai cf))
                    (prohibido 0 0 ff cf filai columnai))
               (begin
                 (jugar ff cf ficha)
                 )
               (displayln "Movimiento invalido")
               )
           (displayln "Movimiento invalido")
           )
  )
;rey
(define (rey ff cf ficha)
  (if (and (> ff -1)(< ff 8)
           (> cf -1)(< cf 8))
      (if(or (and (= ff (- filai 1))(= cf (- columnai 1)))
             (and (= ff (- filai 1))(= cf (+ columnai 1)))
             (and (= ff (+ filai 1))(= cf (- columnai 1)))
             (and (= ff (+ filai 1))(= cf (+ columnai 1)))
             (and (= ff (+ filai 1))(= cf columnai)) 
             (and (= ff filai)(= cf (+ columnai 1)))
             (and (= ff (- filai 1))(= cf columnai)) 
             (and (= ff filai)(= cf (- columnai 1)))
             )
         (begin
           (jugar ff cf ficha)
           (if (odd? nu)
               (set! torre-reyN 1)
               (set! torre-reyB 1)
               )
           )
         ;enrroque
         (if (even? nu)
             ;enrroque Blancas
             (if (and (= ff 7) (or (= cf 7)(= cf 6))
                      (= 0 torre-reyB)
                      (prohibido 0 0 ff 6 filai columnai))
                 (begin
                   (jugar ff 6 ficha)
                   (set! columnaf 5)
                   (set! columnai 7)
                   (set! nu (- nu 1))
                   (jugar ff 5 32)
                   (set! torre-reyB 1)
                   )
                 (if (and (= ff 7) (or (= cf 0)(= cf 1)(= cf 2))
                          (= 0 torre-reyB)
                          (prohibido 0 0 ff 1 filai columnai))
                     (begin
                        (jugar ff 2 ficha)
                        (set! columnaf 3)
                        (set! columnai 0)
                        (set! nu (- nu 1))
                        (jugar ff 3 25)
                        (set! torre-reyB 1)
                       )
                     (void)
                     )
                 )
             ;enrroque Negras
             (if (and (= ff 0) (or (= cf 7)(= cf 6))
                      (= 0 torre-reyN)
                      (prohibido 0 0 ff 6 filai columnai))
                 (begin
                   (jugar ff 6 ficha)
                   (set! columnaf 5)
                   (set! columnai 7)
                   (set! nu (- nu 1))
                   (jugar ff 5 8)
                   (set! torre-reyN 1)
                   )
                 (if (and (= ff 0) (or (= cf 0)(= cf 1)(= cf 2))
                          (= 0 torre-reyN)
                          (prohibido 0 0 ff 1 filai columnai))
                     (begin
                       (jugar ff 2 ficha)
                       (set! columnaf 3)
                       (set! columnai 0)
                       (set! nu (- nu 1))
                       (jugar ff 3 1)
                       (set! torre-reyN 1)
                       )
                     (void)
                     )
                 )
             )
         )
      (displayln "Movimiento invalido")
      )
  )
;prohibiciones
(define (prohibido signo1 signo2 ff cf nu num)
  (set! signo1 (cond ((= 0 (- filai ff)) *)((< 0 (- filai ff)) -)((> 0 (- filai ff)) +)))
  (set! signo2 (cond ((= 0 (- columnai cf)) *)((< 0 (- columnai cf)) -)((> 0 (- columnai cf)) +)))
  (set! nu (signo1 nu 1))
  (set! num (signo2 num 1))
  (pro signo1 signo2 ff cf nu num)
  )
(define (pro signo1 signo2 ff cf nu num)
  (if (and (= ff nu) (= cf num))
      #t
      (if (equal? (vector-ref (vector-ref piezas nu) num) 0)
          (pro signo1 signo2 ff cf (signo1 nu 1) (signo2 num 1))
          #f
          )
      )
  )
;coronacion
(define click2.0 0)
(define filaC 0)
(define columnaC 0)
(define ventana2 "")
(define (coronacionB ff cf)
  (if (or (= ff 0) (= ff 7))
      (begin
        (set! ventana2 (open-viewport "Coronación"  300 350))
        (((draw-pixmap-posn "images/CORONACION.jpg") ventana2)(make-posn 0 0 ))
        (ficha-a-poner ff cf)
        )
      (void)
  )
  )
(define (ficha-a-poner ff cf)
  (if (even? nu)
      (if (= ff 0)
          (begin
            (set! click2.0  (get-mouse-click ventana2))
            (set! filaC (posn-y (mouse-click-posn click2.0)))
            (set! columnaC (posn-x (mouse-click-posn click2.0)))
            (cond
              ((and (> filaC 100)(<= filaC 150)(> columnaC 75)(< columnaC 225))
               (jugar ff cf 28))
              ((and (> filaC 150)(<= filaC 200)(> columnaC 75)(< columnaC 225))
               (jugar ff cf 27))
              ((and (> filaC 200)(< filaC 250)(> columnaC 75)(< columnaC 225))
               (jugar ff cf 25))
              ((and (> filaC 250)(< filaC 300)(> columnaC 75)(< columnaC 225))
               (jugar ff cf 26))
              (else (ficha-a-poner ff cf))
              )
            (close-viewport ventana2)
            )
          (void)
          )
      (if (= ff 7)
          (begin
            (set! click2.0  (get-mouse-click ventana2))
            (set! filaC (posn-y (mouse-click-posn click2.0)))
            (set! columnaC (posn-x (mouse-click-posn click2.0)))
            (cond
              ((and (> filaC 100)(<= filaC 150)(> columnaC 75)(< columnaC 225))
               (jugar ff cf 4))
              ((and (> filaC 150)(<= filaC 200)(> columnaC 75)(< columnaC 225))
               (jugar ff cf 3))
              ((and (> filaC 200)(< filaC 250)(> columnaC 75)(< columnaC 225))
               (jugar ff cf 8))
              ((and (> filaC 250)(< filaC 300)(> columnaC 75)(< columnaC 225))
               (jugar ff cf 2))
              (else (ficha-a-poner ff cf))
              )
            (close-viewport ventana2)
            )
          (void)
          )
      )
  )       
;jugar (cambiar valores en matriz y modificar modo grafico)
(define (jugar ff cf ficha)
  (set! ficha2 (vector-ref (vector-ref piezas ff) cf))
  (vector-set! (vector-ref piezas filai) columnai  0)
  (vector-set! (vector-ref piezas ff) cf  ficha)
  (if (odd? nu)
      (begin
      (set! esta-en-jaqueN 0)
      (ataquesB 17)
      (if (= esta-en-jaqueN 1)
          (begin
            (vector-set! (vector-ref piezas filai) columnai  ficha)
            (vector-set! (vector-ref piezas ff) cf  ficha2)
            )
          (begin
            ((draw-solid-rectangle ventana1)(make-posn 50 475) 400 107 "white")
            ((draw-solid-rectangle ventana1)(make-posn (* (+ 1 cf) 50)(* (+ ff 1)50))49 49 (color2))
            (((draw-pixmap-posn (usar ficha) 'gif/mask) ventana1)(make-posn (* (+ 1 cf) 50)(* (+ ff 1) 50)))
            ((draw-solid-rectangle ventana1)(make-posn (* (+ 1 columnai) 50)(* (+ filai 1) 50))49 49 (color))
            (set! nu (+ nu 1))
            )
          )
      )
      (begin
      (set! esta-en-jaqueB 0)
      (ataquesN 1)
      (if (= esta-en-jaqueB 1)
          (begin
            (vector-set! (vector-ref piezas filai) columnai  ficha)
            (vector-set! (vector-ref piezas ff) cf  ficha2)
            )
          (begin
            ((draw-solid-rectangle ventana1)(make-posn 50 475) 400 107 "white")
            ((draw-solid-rectangle ventana1)(make-posn (* (+ 1 cf) 50)(* (+ ff 1)50))49 49 (color2))
            (((draw-pixmap-posn (usar ficha) 'gif/mask) ventana1)(make-posn (* (+ 1 cf) 50)(* (+ ff 1) 50)))
            ((draw-solid-rectangle ventana1)(make-posn (* (+ 1 columnai) 50)(* (+ filai 1) 50))49 49 (color))
            (set! nu (+ nu 1))
            )
          )
      )
      )
  )
;color del cuadro a poner
(define (color)
  (if (even? (+ filai columnai))
      "White"
      "Slate Blue"
      )
  )
(define (color2)
  (if (even? (+ columnaf filaf))
      "White"
      "Slate Blue"
      )
  )
;eleccion de ficha a usar
(define (usar ficha)
  (cond
    ((and (>= ficha 9) (<= ficha 16))  "images/Peon2.gif")
    ((or (= ficha 1)(= ficha 8))       "images/Torre2.gif")
    ((or (= ficha 3)(= ficha 6))       "images/Alfil2.gif")
    ((= ficha 2)                       "images/Caballo22.gif")
    ((= ficha 7)                       "images/Caballo2.gif")
    ((= ficha 4)                       "images/Dama2.gif")
    ((= ficha 5)                       "images/Rey2.gif")
    ((and (>= ficha 17) (<= ficha 24)) "images/peon.gif")
    ((or (= ficha 25)(= ficha 32))     "images/torre.gif")
    ((or (= ficha 27)(= ficha 30))     "images/alfil.gif")
    ((= ficha 26)                      "images/caballo12.gif")
    ((= ficha 31)                      "images/caballo.gif")
    ((= ficha 28)                      "images/dama.gif")
    ((= ficha 29)                      "images/rey.gif")
    (else  (display "ficha inexistente en el juego"))
    )
  )
;busqueda de ficha
(define f-efimero 0)
(define c-efimero 0)
(define (fila numero ficha)
  (if (> numero 7)
      #f
      (begin
        (if (columna2 numero ficha 0)
            #t
            (fila (+ numero 1) ficha)
            )
        )
      )
  )
(define (columna2 numero ficha num)
  (if (> num 7)
      #f
      (if (= (vector-ref (vector-ref piezas numero) num) ficha)
          (begin
            (set! f-efimero numero)
            (set! c-efimero num)
            #t
            )
          (columna2 numero ficha (+ num 1))
          )
      )
  )
;Jaque
;BLANCAS
(define (ataquesB nu)
  (if (and (> nu 16) (< nu 33)) 
      (if (fila 0 nu)
          (cond
            ((or (= nu 30) (= nu 27)) (begin        (pro2 + - f-efimero c-efimero 1 5)
                                                    (pro2 - - f-efimero c-efimero 1 5)
                                                    (pro2 + + f-efimero c-efimero 1 5)
                                                    (pro2 - + f-efimero c-efimero 1 5)
                                                    (ataquesB (+ nu 1))))
            ((or (= nu 25) (= nu 32)) (begin        (pro2 * - f-efimero c-efimero 0 5)
                                                    (pro2 - * f-efimero c-efimero 0 5)
                                                    (pro2 * + f-efimero c-efimero 0 5)
                                                    (pro2 + * f-efimero c-efimero 0 5)
                                                    (ataquesB (+ nu 1))))
            ((= nu 28)                 (begin       (pro2 * - f-efimero c-efimero 0 5)
                                                    (pro2 - * f-efimero c-efimero 0 5)
                                                    (pro2 * + f-efimero c-efimero 0 5)
                                                    (pro2 + * f-efimero c-efimero 0 5)
                                                    (pro2 + - f-efimero c-efimero 1 5)
                                                    (pro2 - - f-efimero c-efimero 1 5)
                                                    (pro2 + + f-efimero c-efimero 1 5)
                                                    (pro2 - + f-efimero c-efimero 1 5)
                                                    (ataquesB (+ nu 1))))
            ((or (= nu 26) (= nu 31))               (jaque2.2 (+ f-efimero 2)(- c-efimero 1) 2 5)
                                                    (jaque2.2 (+ f-efimero 2)(+ c-efimero 1) 2 5)
                                                    (jaque2.2 (- f-efimero 2)(- c-efimero 1) 2 5)
                                                    (jaque2.2 (- f-efimero 2)(+ c-efimero 1) 2 5)
                                                    (jaque2.2 (+ f-efimero 1)(- c-efimero 2) 2 5)
                                                    (jaque2.2 (- f-efimero 1)(- c-efimero 2) 2 5)
                                                    (jaque2.2 (+ f-efimero 1)(+ c-efimero 2) 2 5)
                                                    (jaque2.2 (- f-efimero 1)(+ c-efimero 2) 2 5)
                                                    (ataquesB (+ nu 1)))
            ((or (> nu 16) (< nu 25)) (begin        (pro2.1 - + f-efimero c-efimero 0 5)
                                                    (pro2.1 - - f-efimero c-efimero 0 5)
                                                    (ataquesB (+ nu 1))))
            ((= nu 29)                (begin        (pro2.1 * - f-efimero c-efimero 0 5)
                                                    (pro2.1 - * f-efimero c-efimero 0 5)
                                                    (pro2.1 * + f-efimero c-efimero 0 5)
                                                    (pro2.1 + * f-efimero c-efimero 0 5)
                                                    (pro2.1 + - f-efimero c-efimero 1 5)
                                                    (pro2.1 - - f-efimero c-efimero 1 5)
                                                    (pro2.1 + + f-efimero c-efimero 1 5)
                                                    (pro2.1 - + f-efimero c-efimero 1 5)
                                                    (ataquesB (+ nu 1))))
            
            )
          (ataquesB (+ nu 1))
          )
      (void)
      )
  )
;NEGRAS
(define (ataquesN nu)
  (if (and (> nu 0) (< nu 17)) 
      (if (fila 0 nu)
          (cond
            ((or (= nu 6) (= nu 3)) (begin          (pro2 + - f-efimero c-efimero 1 29)
                                                    (pro2 - - f-efimero c-efimero 1 29)
                                                    (pro2 + + f-efimero c-efimero 1 29)
                                                    (pro2 - + f-efimero c-efimero 1 29)
                                                    (ataquesN (+ nu 1))))
            ((or (= nu 1) (= nu 8)) (begin          (pro2 * - f-efimero c-efimero 0 29)
                                                    (pro2 - * f-efimero c-efimero 0 29)
                                                    (pro2 * + f-efimero c-efimero 0 29)
                                                    (pro2 + * f-efimero c-efimero 0 29)
                                                    (ataquesN (+ nu 1))))
            ((= nu 4)                 (begin        (pro2 * - f-efimero c-efimero 0 29)
                                                    (pro2 - * f-efimero c-efimero 0 29)
                                                    (pro2 * + f-efimero c-efimero 0 29)
                                                    (pro2 + * f-efimero c-efimero 0 29)
                                                    (pro2 + - f-efimero c-efimero 1 29)
                                                    (pro2 - - f-efimero c-efimero 1 29)
                                                    (pro2 + + f-efimero c-efimero 1 29)
                                                    (pro2 - + f-efimero c-efimero 1 29)
                                                    (ataquesN (+ nu 1))))
            ((or (= nu 2) (= nu 7))                 (jaque2.2 (+ f-efimero 2)(- c-efimero 1) 2 29)
                                                    (jaque2.2 (+ f-efimero 2)(+ c-efimero 1) 2 29)
                                                    (jaque2.2 (- f-efimero 2)(- c-efimero 1) 2 29)
                                                    (jaque2.2 (- f-efimero 2)(+ c-efimero 1) 2 29)
                                                    (jaque2.2 (+ f-efimero 1)(- c-efimero 2) 2 29)
                                                    (jaque2.2 (- f-efimero 1)(- c-efimero 2) 2 29)
                                                    (jaque2.2 (+ f-efimero 1)(+ c-efimero 2) 2 29)
                                                    (jaque2.2 (- f-efimero 1)(+ c-efimero 2) 2 29)
                                                    (ataquesN (+ nu 1)))
            ((or (> nu 8) (< nu 17)) (begin         (pro2.1 + + f-efimero c-efimero 0 29)
                                                    (pro2.1 + - f-efimero c-efimero 0 29)
                                                    (ataquesN (+ nu 1))))
            ((= nu 5)                (begin         (pro2.1 * - f-efimero c-efimero 0 29)
                                                    (pro2.1 - * f-efimero c-efimero 0 29)
                                                    (pro2.1 * + f-efimero c-efimero 0 29)
                                                    (pro2.1 + * f-efimero c-efimero 0 29)
                                                    (pro2.1 + - f-efimero c-efimero 1 29)
                                                    (pro2.1 - - f-efimero c-efimero 1 29)
                                                    (pro2.1 + + f-efimero c-efimero 1 29)
                                                    (pro2.1 - + f-efimero c-efimero 1 29)
                                                    (ataquesN (+ nu 1))))
            
            )
          (ataquesN (+ nu 1))
          )
      (void)
      )
  )
;verificacion de alfil, dama y torre para ver si dan jaque al rey
(define (pro2 signo1 signo2 nu num pos rey)
  (set! nu (signo1 nu 1))
  (set! num (signo2 num 1))
  (jaque signo1 signo2 nu num pos rey)
  )
(define (jaque signo1 signo2 nu num pos rey)
  (if (and (and (< nu 8)(> nu -1))(and (< num 8)(> num -1)))
      (if (= (vector-ref (vector-ref piezas nu) num) rey)
          (if (= rey 5)
              (set! esta-en-jaqueN 1)
              (set! esta-en-jaqueB 1)
              )
          (if (= (vector-ref (vector-ref piezas nu) num) 0)
                (jaque signo1 signo2 (signo1 nu 1) (signo2 num 1) pos rey)
                (void)
              )
          )
      (void)
      )
  )
;verificacion de peon y rey para ver si dan jaque al rey
(define (pro2.1 signo1 signo2 nu num pos rey)
  (set! nu (signo1 nu 1))
  (set! num (signo2 num 1))
  (jaque2.1 signo1 signo2 nu num pos rey)
  )
(define (jaque2.1 signo1 signo2 nu num pos rey)
  (if (and (and (< nu 8)(> nu -1))(and (< num 8)(> num -1)))
      (if (= (vector-ref (vector-ref piezas nu) num) rey)
          (if (= rey 5)
              (set! esta-en-jaqueN 1)
              (set! esta-en-jaqueB 1)
              )
          (void)
          )
      (void)
      )
  )
;verificacion de caballo para ver si dan jaque al rey
(define (jaque2.2 nu num pos rey)
  (if (and (and (< nu 8)(> nu -1))(and (< num 8)(> num -1)))
      (if (= (vector-ref (vector-ref piezas nu) num) rey)
          (if (= rey 5)
              (set! esta-en-jaqueN 1)
              (set! esta-en-jaqueB 1)
              )
          (void)
          )
      (void)
      )
  )
(llamar (inicio))