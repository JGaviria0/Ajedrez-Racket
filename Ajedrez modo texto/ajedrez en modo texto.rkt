#lang racket
;Jhon Alex Gaviria
;19/04/2019
;EN ESTE CASO
;                   1    2    3    4    5    6    7    8
(define a (vector " T1 " " C1 " " A1 " " DA " " RE " " A2 " " C2 " " T2 "));1
(define b (vector " P1 " " P2 " " P3 " " P4 " " P5 " " P6 " " P7 " " P8 "));2
(define c (vector "    " "    " "    " "    " "    " "    " "    " "    "));3
(define d (vector "    " "    " "    " "    " "    " "    " "    " "    "));4
(define e (vector "    " "    " "    " "    " "    " "    " "    " "    "));5
(define f (vector "    " "    " "    " "    " "    " "    " "    " "    "));6
(define g (vector " p1 " " p2 " " p3 " " p4 " " p5 " " p6 " " p7 " " p8 "));7
(define h (vector " t1 " " c1 " " a1 " " da " " re " " a2 " " c2 " " t2 "));8
(define tablero (vector a b c d e f g h))
(define orden (vector 1 2 3 4 5 6 7 8))
(define nu 0)
;posicion inicial (efimero)
(define filai 0)
(define columnai 0)
;union
(define (unionb jej ficha)
  (imprenta 1 )
  (newline)
  (displayln "Ficha a mover")
  (set! ficha (string-append " " (~a (read)) " " ))
  (llamar ficha)      
  )
;llamando
(define (llamar ficha)
  (if (odd? nu)
      ;movimiento de Nagras
      (if (or (equal? (substring ficha 1 2) "T")
              (equal? (substring ficha 1 2) "A")
              (equal? (substring ficha 1 2) "C")
              (equal? (substring ficha 1 2) "D")
              (equal? (substring ficha 1 2) "R")
              (equal? (substring ficha 1 2) "P")
              )
          (if (fila 0 ficha)
              (begin
                (displayln "Posicion a mover en fila y columna respectivamente")
                (verificar (- (read) 1) (- (read) 1) ficha nu)
                (newline)
                (displayln "Ficha a mover")
                (llamar (string-append " " (~a (read)) " " ))
                )
              (begin
                (newline)
                (displayln "Ficha inexistente en el juego")(newline)
                (displayln "Ficha a mover")
                (llamar (string-append " " (~a (read)) " " ))
                )
              )
          (begin
            (displayln "Mueven las Negras (MAYUSCULAS)")
            (newline)
            (displayln "Ficha a mover")
            (llamar (string-append " " (~a (read)) " " ))
            )
          )
      ;movimiento de Blancas
      (if (or (equal? (substring ficha 1 2) "t")
              (equal? (substring ficha 1 2) "a")
              (equal? (substring ficha 1 2) "c")
              (equal? (substring ficha 1 2) "d")
              (equal? (substring ficha 1 2) "r")
              (equal? (substring ficha 1 2) "p")
              )
          (if (fila 0 ficha)
              (begin
                (displayln "Posicion a mover en fila y columna respectivamente")
                (verificar (- (read) 1) (- (read) 1) ficha nu)
                (newline)
                (displayln "Ficha a mover")
                (llamar (string-append " " (~a (read)) " " ))
                )
              (begin
                (newline)
                (displayln "Ficha inexistente en el juego")(newline)
                (displayln "Ficha a mover")
                (llamar (string-append " " (~a (read)) " " ))
                )
              )
          (begin
            (displayln "Mueven las blancas (minusculas)")
            (newline)
            (displayln "Ficha a mover")
            (llamar (string-append " " (~a (read)) " " ))
            )
          )
      )
  )
;posicion inicial
(define (fila numero ficha)
  (if (> nu 7)
      #f
      (begin
        (if (columna2 numero ficha 0)
            #t
            (fila (+ numero 1) ficha)
            )
        )
      )
  )
(define (columna2 numero ficha num)
  (if (> num 7)
      #f
      (if (equal? (vector-ref (vector-ref tablero numero) num) ficha)
          (begin
            (set! filai numero)
            (set! columnai num)
            #t
            )
          (columna2 numero ficha (+ num 1))
          )
      )
  )
;vereficar ficha
(define (verificar nu num ficha nuf)
  (if (odd? nuf)
      (if (Blanca? nu num)
          (cond
            ((equal? (substring ficha 1 2) "P") (peonN nu num ficha));peones
            ((equal? (substring ficha 1 2) "T") (torre nu num ficha));torres
            ((equal? (substring ficha 1 2) "A") (alfil nu num ficha));alfil
            ((equal? (substring ficha 1 2) "C") (caballo nu num ficha));caballos
            ((equal? (substring ficha 1 2) "D") (dama nu num ficha));damas
            ((equal? (substring ficha 1 2) "R") (rey nu num ficha));reyes
            (else  (display "ficha inexistente en el juego"))
            )
          (display "No te puedes comer a tu equipo")
          )
      (if (Negra? nu num)
          (cond
            ((equal? (substring ficha 1 2) "p") (peonB nu num ficha));peones
            ((equal? (substring ficha 1 2) "t") (torre nu num ficha));torres
            ((equal? (substring ficha 1 2) "a") (alfil nu num ficha));alfil
            ((equal? (substring ficha 1 2) "c") (caballo nu num ficha));caballos
            ((equal? (substring ficha 1 2) "d") (dama nu num ficha));damas
            ((equal? (substring ficha 1 2) "r") (rey nu num ficha));reyes
            (else  (display "ficha inexistente en el juego"))
            )
          (display "No te puedes comer a tu equipo")
          )
      )
  )
;movimiento peon NEGRO
(define (peonN ff cf ficha)
  (if (> ff -1)
      ;comer
      (if (or (and (= cf (- columnai 1)) (= ff (+ filai 1)))
              (and (= cf (+ columnai 1)) (= ff (+ filai 1)))
              )
          (if (equal? (vector-ref (vector-ref tablero ff) cf) "    ")
              (displayln "Movimiento invalido")
              (if (or (equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "t")
                      (equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "a")
                      (equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "c")
                      (equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "d")
                      (equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "r")
                      (equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "p")
                      )
                  (begin
                    (vector-set! (vector-ref tablero filai) columnai  "    ")
                    (vector-set! (vector-ref tablero ff) cf  ficha)
                    (set! nu (+ nu 1))
                    (imprenta 1)
                    )
                  (displayln "Movimiento invalido")
                  )
              )
          ;mover
          (if (= filai 1)
              (if (or (and (= columnai cf) (= ff (+ filai 1))
                               (equal? (vector-ref (vector-ref tablero (+ filai 1)) columnai) "    "))
                          (and (= columnai cf) (= ff (+ filai 2))
                               (equal? (vector-ref (vector-ref tablero (+ filai 1)) columnai) "    ")
                               (equal? (vector-ref (vector-ref tablero (+ filai 2)) columnai) "    ")))
                  (begin
                    (vector-set! (vector-ref tablero filai) columnai  "    ")
                    (vector-set! (vector-ref tablero ff) cf  ficha)
                    (set! nu (+ nu 1))
                    (imprenta 1 )
                    )
                  (displayln "Movimiento invalido")
                  )
              (if (and (= columnai cf) (= ff (+ filai 1))
                       (equal? (vector-ref (vector-ref tablero (+ filai 1)) columnai) "    "))
                       (begin
                         (vector-set! (vector-ref tablero filai) columnai  "    ")
                         (vector-set! (vector-ref tablero ff) cf  ficha)
                         (set! nu (+ nu 1))
                         (imprenta 1 )
                         )
                       (displayln "Movimiento invalido")
                       )
                  )
              )
          
          (displayln "Movimiento invalido")
          )
      )
  
;movimiento peon BLANCO
(define (peonB ff cf ficha)
  (if (> ff -1)
      ;comer
      (if (or (and (= cf (- columnai 1)) (= ff (- filai 1)))
              (and (= cf (+ columnai 1)) (= ff (- filai 1)))
              )
          (if (equal? (vector-ref (vector-ref tablero ff) cf) "    ")
              (displayln "Movimiento invalido")
              (if (or (equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "T")
                      (equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "A")
                      (equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "C")
                      (equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "D")
                      (equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "R")
                      (equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "P")
                      )
                  (begin
                    (vector-set! (vector-ref tablero filai) columnai  "    ")
                    (vector-set! (vector-ref tablero ff) cf  ficha)
                    (set! nu (+ nu 1))
                    (imprenta 1 )
                    )
                  (displayln "Movimiento invalido")
                  )
              )
              (if (= filai 6)
                  ;mover 
                  (if (or (and (= columnai cf) (= ff (- filai 1))
                               (equal? (vector-ref (vector-ref tablero (- filai 1)) columnai) "    "))
                          (and (= columnai cf) (= ff (- filai 2))
                               (equal? (vector-ref (vector-ref tablero (- filai 1)) columnai) "    ")
                               (equal? (vector-ref (vector-ref tablero (- filai 2)) columnai) "    ")))
                      (begin
                        (vector-set! (vector-ref tablero filai) columnai  "    ")
                        (vector-set! (vector-ref tablero ff) cf  ficha)
                        (set! nu (+ nu 1))
                        (imprenta 1 )
                        )
                      (displayln "Movimiento invalido")
                      )
                  (if (and (= columnai cf) (= ff (- filai 1))
                           (equal? (vector-ref (vector-ref tablero (- filai 1)) columnai) "    "))
                      (begin
                        (vector-set! (vector-ref tablero filai) columnai  "    ")
                        (vector-set! (vector-ref tablero ff) cf  ficha)
                        (set! nu (+ nu 1))
                        (imprenta 1 )
                        )
                      (displayln "Movimiento invalido")
                      )
                  )
              )
              (displayln "Movimiento invalido")
              )
          )
  
;alfil
(define (alfil ff cf ficha)
      (if (and (> ff -1)(< ff 8)
               (> cf -1)(< cf 8))
          (if (and (= (abs (- filai ff))(abs (- columnai cf)))
                   (prohibido 0 0 ff cf filai columnai))
              (begin
                (vector-set! (vector-ref tablero filai) columnai  "    ")
                (vector-set! (vector-ref tablero ff) cf  ficha)
                (set! nu (+ nu 1))
                (imprenta 1 )
                )
              (displayln "Movimiento invalido")
              )
          (displayln "Movimiento invalido")
          )
      )
;prohibiciones
(define (prohibido signo1 signo2 ff cf nu num)
  (set! signo1 (cond ((= 0 (- filai ff)) *)((< 0 (- filai ff)) -)((> 0 (- filai ff)) +)))
  (set! signo2 (cond ((= 0 (- columnai cf)) *)((< 0 (- columnai cf)) -)((> 0 (- columnai cf)) +)))
  (set! nu (signo1 nu 1))
  (set! num (signo2 num 1))
  (pro signo1 signo2 ff cf nu num)
  )
(define (pro signo1 signo2 ff cf nu num)
  (if (and (= ff nu) (= cf num))
      #t
      (if (equal? (vector-ref (vector-ref tablero nu) num) "    ")
          (pro signo1 signo2 ff cf (signo1 nu 1) (signo2 num 1))
          #f
          )
      )
  )
          
;caballo
(define (caballo ff cf ficha)
  (if (and (> ff -1)(< ff 8)
           (> cf -1)(< cf 8))
      (if(or (and (= ff (+ filai 2))(= cf (- columnai 1)))
             (and (= ff (+ filai 2))(= cf (+ columnai 1)))
             (and (= ff (- filai 2))(= cf (- columnai 1)))
             (and (= ff (- filai 2))(= cf (+ columnai 1)))
             (and (= ff (+ filai 1))(= cf (- columnai 2)))
             (and (= ff (- filai 1))(= cf (- columnai 2)))
             (and (= ff (+ filai 1))(= cf (+ columnai 2)))
             (and (= ff (- filai 1))(= cf (+ columnai 2))))
         (begin
           (vector-set! (vector-ref tablero filai) columnai  "    ")
           (vector-set! (vector-ref tablero ff) cf  ficha)
           (set! nu (+ nu 1))
           (imprenta 1 )
           )
         (displayln "Movimiento invalido")
         )
      (displayln "Movimiento invalido")
      )
  )

;torre
(define (torre ff cf ficha)
  (if (and (> ff -1)(< ff 8)
           (> cf -1)(< cf 8))
      (if (and (or (= filai ff) (= columnai cf))
               (prohibido 0 0 ff cf filai columnai))
              (begin
                (vector-set! (vector-ref tablero filai) columnai  "    ")
                (vector-set! (vector-ref tablero ff) cf  ficha)
                (set! nu (+ nu 1))
                (imprenta 1 )
                )
              (displayln "Movimiento invalido")
              )
      (displayln "Movimiento invalido")
      )
  )
;Dama
(define (dama ff cf ficha)
  (if (and (> ff -1)(< ff 8)
           (> cf -1)(< cf 8))
           (if (and (or (= (abs (- filai ff))(abs (- columnai cf)))
                        (= filai ff)(= columnai cf))
                    (prohibido 0 0 ff cf filai columnai))
               (begin
                 (vector-set! (vector-ref tablero filai) columnai  "    ")
                 (vector-set! (vector-ref tablero ff) cf  ficha)
                 (set! nu (+ nu 1))
                 (imprenta 1 )
                 )
               (displayln "Movimiento invalido")
               )
           (displayln "Movimiento invalido")
           )
  )
;rey
(define (rey ff cf ficha)
  (if (and (> ff -1)(< ff 8)
           (> cf -1)(< cf 8))
      (if(or (and (= ff (- filai 1))(= cf (- columnai 1)))
                   (and (= ff (- filai 1))(= cf (+ columnai 1)))
                   (and (= ff (+ filai 1))(= cf (- columnai 1)))
                   (and (= ff (+ filai 1))(= cf (+ columnai 1)))
                   (= ff (+ filai 1))
                   (= cf (+ columnai 1))
                   (= ff (- filai 1))
                   (= cf (- columnai 1))
                   )
               (begin
                 (vector-set! (vector-ref tablero filai) columnai  "    ")
                 (vector-set! (vector-ref tablero ff) cf  ficha)
                 (set! nu (+ nu 1))
                 (imprenta 1 )
                 )
               (displayln "Movimiento invalido")
               )
          (displayln "Movimiento invalido")
          )
      )
;¿es negra?
(define (Negra? ff cf)
  (cond
    ((equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "T") #t)
    ((equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "A") #t)
    ((equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "C") #t)
    ((equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "D") #t)
    ((equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "R") #t)
    ((equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "P") #t)
    ((equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) " ") #t)
    (else #f)
    )
  )
;¿es blanca?
(define (Blanca? ff cf)
  (cond
    ((equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "t") #t)
    ((equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "a") #t)
    ((equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "c") #t)
    ((equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "d") #t)
    ((equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "r") #t)
    ((equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) "p") #t)
    ((equal? (substring (vector-ref (vector-ref tablero ff) cf) 1 2) " ") #t)
    (else #f)
    )
  )
;imprimir
(define (imprenta nu)
  (if (> nu 17)
      (displayln "  _1   _2   _3   _4   _5   _6   _7   _8 ")
      (if (odd? nu)
          (begin
            (display "+----+----+----+----+----+----+----+----+")
            (newline)
            (imprenta (+ nu 1))
          )
          (begin
            (columna (- (/ nu 2)1) 1)
            (display (vector-ref orden (- (/ nu 2)1))) 
            (newline)
            (imprenta (+ nu 1))
            )
      )
  )
  )
(define (columna nu num)
  (if (> num 17)
      (void)
      (if (odd? num)
          (begin
            (display "|")
            (columna nu (+ 1 num))
          )
          (begin
            (display (vector-ref (vector-ref tablero nu) (- (/ num 2) 1)))
            (columna nu (+ 1 num))
          )
          )   
      )
  )
(unionb 1 0)